#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef ORANGETRUSTBADGE_SWIFT_H
#define ORANGETRUSTBADGE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OrangeTrustBadge",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UISwitch;

/// This base class describes minimum informations needed to be displayed into OrangeTrustBadge component.
/// Implementations are available through BasicPermission and CustomPermission class
SWIFT_CLASS("_TtC16OrangeTrustBadge17TrustBadgeElement")
@interface TrustBadgeElement : NSObject
/// Flag telling if OrangeTrustBadge should display a switch to enable/disable the element
@property (nonatomic) BOOL isToggable;
/// Closure allowing to update current element’s status
@property (nonatomic, copy) void (^ _Nonnull toggleClosure)(UISwitch * _Nonnull);
/// Closure giving element’s status (enabled/disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull statusClosure)(void);
/// Flag telling if OrangeTrustBadge should display the current status the element
@property (nonatomic) BOOL showStatus;
/// Flag telling if OrangeTrustBadge should display a link to iOS Preferences to enable/disable it.
@property (nonatomic) BOOL isConfigurable;
/// Localized Key for element’s name
@property (nonatomic, copy) NSString * _Nonnull nameKey;
/// Localized Key for element’s description
@property (nonatomic, copy) NSString * _Nonnull descriptionKey;
/// Icon name for element’s enabled state
@property (nonatomic, copy) NSString * _Nonnull statusEnabledIconName;
/// Icon name for element’s disabled state
@property (nonatomic, copy) NSString * _Nonnull statusDisabledIconName;
/// Flag telling if the corresponding UI is expanded (display details)
@property (nonatomic) BOOL isExpanded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A CustomElement is a configurable/custom element, often related to your own application logic.
SWIFT_CLASS("_TtC16OrangeTrustBadge13CustomElement")
@interface CustomElement : TrustBadgeElement
/// Initializer of of CustomElement
/// \param nameKey desired localized Key for CustomElement’s name
///
/// \param descriptionKey desired localized Key for CustomElement’s description
///
/// \param statusEnabledIconName desired icon name for Element’s enabled state (using asset catalog)
///
/// \param statusDisabledIconName desired icon name for Element’s disabled state (using asset catalog)
///
///
/// returns:
/// initialized CustomElement object
- (nonnull instancetype)initWithNameKey:(NSString * _Nonnull)nameKey descriptionKey:(NSString * _Nonnull)descriptionKey statusEnabledIconName:(NSString * _Nonnull)statusEnabledIconName statusDisabledIconName:(NSString * _Nonnull)statusDisabledIconName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebViewConfiguration;
@class NSCoder;

SWIFT_CLASS("_TtC16OrangeTrustBadge17DailymotionPlayer")
@interface DailymotionPlayer : WKWebView <WKNavigationDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum describing the type of a PreDefinedElement
typedef SWIFT_ENUM(NSInteger, ElementType, open) {
/// Permission to access user’s location
  ElementTypeLocation = 0,
/// Permission to access user’s Address Book
  ElementTypeContacts = 1,
/// Permission to access user’s Photo Library
  ElementTypePhotoLibrary = 2,
/// Permission to access user’s Media Library
  ElementTypeMedia = 3,
/// Permission to access user’s Calendar
  ElementTypeCalendar = 4,
/// Permission to access user’s Camera
  ElementTypeCamera = 5,
/// Permission to access user’s REminders
  ElementTypeReminders = 6,
/// Permission to share datas via Bluetooh
  ElementTypeBluetoothSharing = 7,
/// Permission to access user’s Microphone
  ElementTypeMicrophone = 8,
/// Permission to access user’s Music activity and Media Library
  ElementTypeSpeechRecognition = 9,
/// Permission to access user’s Health data
  ElementTypeHealth = 10,
/// Permission to access user’s Homekit data
  ElementTypeHomekit = 11,
/// Permission to access user’s Motion activity & Fitness data
  ElementTypeMotionFitness = 12,
/// Permission to receive local and remote notifications
  ElementTypeNotifications = 13,
/// Identity Element (firstname, lastname etc…)
  ElementTypeIdentity = 14,
/// Permission to access user’s account informations
  ElementTypeAccountInformations = 15,
/// Permission to anonymously track user’s activity within the app
  ElementTypeDataUsage = 16,
/// Permission to store cookies for marketing purposes
  ElementTypeAdvertising = 17,
/// Permission to ollects information about your preferences and usage history
  ElementTypeHistory = 18,
};


/// A PreDefinedElement is a pre-defined TrustBadgeElement, often backed by a system-permission (e.g. Location for instance)
SWIFT_CLASS("_TtC16OrangeTrustBadge17PreDefinedElement")
@interface PreDefinedElement : TrustBadgeElement
/// Flag telling if the manager should autoConfigure the element
@property (nonatomic) BOOL shouldBeAutoConfigured;
/// Standard initializer
/// \param type desired ElementType
///
///
/// returns:
/// initialized PreDefinedElement object
- (nonnull instancetype)initWithType:(enum ElementType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TermType : NSInteger;

/// A Term is a block displayed in “Terms” section
SWIFT_CLASS("_TtC16OrangeTrustBadge4Term")
@interface Term : NSObject
/// Type of a Term
@property (nonatomic) enum TermType type;
/// Localized Key for Term’s title
@property (nonatomic, copy) NSString * _Nonnull titleKey;
/// Localized Key for Term’s content (could include HTML content)
@property (nonatomic, copy) NSString * _Nonnull contentKey;
/// Initializer
/// \param type desired TermType
///
/// \param titleKey desired localized Key for Term’s title
///
/// \param contentKey desired localized Key for Term’s content
///
///
/// returns:
/// initialized Term object
- (nonnull instancetype)initWithType:(enum TermType)type titleKey:(NSString * _Nonnull)titleKey contentKey:(NSString * _Nonnull)contentKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum describing the type of a Term
typedef SWIFT_ENUM(NSInteger, TermType, open) {
/// A block displaying textual terms of use
  TermTypeText = 0,
/// A block displaying a video in terms of use
  TermTypeVideo = 1,
};

@class TrustBadgeConfig;

/// TrustBadgeManager Class is the heart of OrangeTrustBadge
SWIFT_CLASS("_TtC16OrangeTrustBadge10TrustBadge")
@interface TrustBadge : NSObject
/// Starting point to integrate TrustBadge SDK into your app.
/// Simply provide a Configuration object in order to initialize the SDK : it will contains parameters and hooks to customize standard SDK behaviours.
/// Example :
/// \code
/// let config = TrustBadgeConfig()
/// TrustBadgeManager.with(config)
///
/// \endcode\param configuration An TrustBadgeConfig containing TrustBadge configuration
///
+ (void)with:(TrustBadgeConfig * _Nonnull)configuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIImage;

/// TrustBadgeConfig aims to encapsulate all the configuration variables and custom handlers of TrustBadgeManager
SWIFT_CLASS("_TtC16OrangeTrustBadge16TrustBadgeConfig")
@interface TrustBadgeConfig : NSObject
/// Name of the app, (Default : Bundle Display Name of host app)
@property (nonatomic, copy) NSString * _Nullable appName;
/// (Optional) UIColor used to highlight element with a positive status (default black)
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
/// (Optional) background UIColor of the header (default blue)
@property (nonatomic, strong) UIColor * _Nonnull headerColor;
/// (Optional) text UIcolor of the header
@property (nonatomic, strong) UIColor * _Nonnull headerTextColor;
/// (Optional) UIImage use for the logo of the header
@property (nonatomic, strong) UIImage * _Nullable headerLogo;
/// (Optional) Status bar style (default Application’s default statusBarStyle)
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// (Optional) modal presentation style (default to none)
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// (Optional) Closure giving Tracking (Data Usage Permission) status (enabled/disabled) (Default : disabled)
/// \code
/// Example :
///
/// ```
/// let config = TrustBadgeConfig()
/// config.isTrackingEnabled = {() in return NSUserDefaults.standardUserDefaults().boolForKey("TRACKING_KEY")}
/// ```
///
/// \endcode
@property (nonatomic, copy) BOOL (^ _Nonnull isTrackingEnabled)(void);
/// (Optional) Closure giving Identity usage (Identity ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isIdentityUsed)(void);
/// (Optional) Closure giving Advertisement (Advertisement ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isAdvertisementUsed)(void);
/// (Optional) Closure giving History (history ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHistoryUsed)(void);
/// (Optional) Closure giving Phone Number (phoneNumber ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isPhoneNumberUsed)(void);
/// (Optional) Closure giving health data status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHealfDataUsed)(void);
/// (Optional) Closure giving homekit status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHomeKitUsed)(void);
/// (Optional) Closure giving Motion & Fitness status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isMotionFitnessUsed)(void);
/// (Optional) Closure allowing to update the Tracking (Data Usage ElementType) status (enabled/disabled).
/// \code
/// Example :
///
/// ```
/// let config = TrustBadgeConfig()
/// config.updateTracking = {(Bool status) in NSUserDefaults.standardUserDefaults().setBool(status, forKey: "TRACKING_KEY")}
/// ```
///
/// \endcode
@property (nonatomic, copy) void (^ _Nonnull updateTracking)(UISwitch * _Nonnull);
/// (Optional) List of TrustBadgeElements that should be displayed in “Main Elements” section. If you append an TrustBadgeElement to the Array, it will add it at the end of it. If you want to ave full control of what should be displayed, please assign a new array to this property. This section must contains at least 1 element to let TrustBadgeManager initialize properly.
/// \code
/// Example :
///
/// ```
/// let myCustomElement = CustomElement(nameKey: "custom-permission-name-key", descriptionKey: "custom-permission-description-key", statusEnabledIconName: "permission-credit-card-enabled-icon", statusDisabledIconName: "permission-credit-card-disabled-icon")
/// myCustomElement.isConfigurable = false
/// myCustomElement.statusClosure = {() in return true}
/// config.mainElements.append(myCustomElement)
///
/// //or with pre-defined permissions such as Calendar :
///
/// let calendarElement = PreDefinedElement(type: .Calendar)
/// config.mainElements.append(calendarElement)
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<TrustBadgeElement *> * _Nonnull devicePermissions;
/// (Optional) List of TrustBadgeElements that should be displayed in “Other Elements” section. If you append an TrustBadgeElement to the Array, it will add it at the end of it. If you want to ave full control of what should be displayed, please assign a new array to this property. If no elements are in the list, this section will not be displayed. (empty by default)
/// \code
/// Example :
///
/// ```
/// let myCustomElement = CustomElement(nameKey: "custom-permission-name-key", descriptionKey: "custom-permission-description-key", statusEnabledIconName: "permission-credit-card-enabled-icon", statusDisabledIconName: "permission-credit-card-disabled-icon")
/// myCustomElement.isConfigurable = false
/// myCustomElement.statusClosure = {() in return true}
/// config.otherElements.append(myCustomElement)
///
/// //or with pre-defined permissions such as Calendar :
///
/// let calendarElement = PreDefinedElement(type: .Calendar)
/// config.otherElements.append(calendarElement)
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<TrustBadgeElement *> * _Nonnull applicationData;
/// (Optional) List of Terms and Conditions that should be displayed in “terms and conditions” section. (empty by default)
/// \code
/// Example :
///
/// ```
/// let customTerm = Term(type: .Text, titleKey: "terms-data-usage-title", contentKey: "terms-data-usage-content")
/// config.terms = [customTerm]
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<Term *> * _Nonnull terms;
/// Closure called when a page is displayed (optional).
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     pageName: the name of the page
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable pageDidAppear)(NSString * _Nonnull);
/// Closure to get the localized string for a wording key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The wording key to localize.
///   </li>
/// </ul>
///
/// returns:
///
/// The localized string or <code>nil</code> to use the default localized string.
@property (nonatomic, copy) NSString * _Nullable (^ _Nonnull localizedString)(NSString * _Nonnull);
/// Closure to get the image for a name.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     name: The name of the image to get
///   </li>
/// </ul>
///
/// returns:
///
/// The image or <code>nil</code> to use the default image.
@property (nonatomic, copy) UIImage * _Nullable (^ _Nonnull loadImage)(NSString * _Nonnull);
/// Convenience method to find elements of a given type in order to configure it directly.
/// This method will search over all elements in every collections the Manager is responsible for
/// \param type type of the Element
///
///
/// returns:
/// array of PreDefinedElements matching a given type
- (NSArray<PreDefinedElement *> * _Nonnull)elementForType:(enum ElementType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_PROTOCOL("_TtP16OrangeTrustBadge18TrustBadgeDelegate_")
@protocol TrustBadgeDelegate
@optional
/// If this method returns true, the landing page will displayed a cell that allows to access
/// / to this view controller.
- (BOOL)shouldDisplayCustomViewController SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return a viewController to displayed for the CustomMenuCell
- (UIViewController * _Nonnull)viewControllerAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef ORANGETRUSTBADGE_SWIFT_H
#define ORANGETRUSTBADGE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OrangeTrustBadge",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UISwitch;

/// This base class describes minimum informations needed to be displayed into OrangeTrustBadge component.
/// Implementations are available through BasicPermission and CustomPermission class
SWIFT_CLASS("_TtC16OrangeTrustBadge17TrustBadgeElement")
@interface TrustBadgeElement : NSObject
/// Flag telling if OrangeTrustBadge should display a switch to enable/disable the element
@property (nonatomic) BOOL isToggable;
/// Closure allowing to update current element’s status
@property (nonatomic, copy) void (^ _Nonnull toggleClosure)(UISwitch * _Nonnull);
/// Closure giving element’s status (enabled/disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull statusClosure)(void);
/// Flag telling if OrangeTrustBadge should display the current status the element
@property (nonatomic) BOOL showStatus;
/// Flag telling if OrangeTrustBadge should display a link to iOS Preferences to enable/disable it.
@property (nonatomic) BOOL isConfigurable;
/// Localized Key for element’s name
@property (nonatomic, copy) NSString * _Nonnull nameKey;
/// Localized Key for element’s description
@property (nonatomic, copy) NSString * _Nonnull descriptionKey;
/// Icon name for element’s enabled state
@property (nonatomic, copy) NSString * _Nonnull statusEnabledIconName;
/// Icon name for element’s disabled state
@property (nonatomic, copy) NSString * _Nonnull statusDisabledIconName;
/// Flag telling if the corresponding UI is expanded (display details)
@property (nonatomic) BOOL isExpanded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A CustomElement is a configurable/custom element, often related to your own application logic.
SWIFT_CLASS("_TtC16OrangeTrustBadge13CustomElement")
@interface CustomElement : TrustBadgeElement
/// Initializer of of CustomElement
/// \param nameKey desired localized Key for CustomElement’s name
///
/// \param descriptionKey desired localized Key for CustomElement’s description
///
/// \param statusEnabledIconName desired icon name for Element’s enabled state (using asset catalog)
///
/// \param statusDisabledIconName desired icon name for Element’s disabled state (using asset catalog)
///
///
/// returns:
/// initialized CustomElement object
- (nonnull instancetype)initWithNameKey:(NSString * _Nonnull)nameKey descriptionKey:(NSString * _Nonnull)descriptionKey statusEnabledIconName:(NSString * _Nonnull)statusEnabledIconName statusDisabledIconName:(NSString * _Nonnull)statusDisabledIconName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebViewConfiguration;
@class NSCoder;

SWIFT_CLASS("_TtC16OrangeTrustBadge17DailymotionPlayer")
@interface DailymotionPlayer : WKWebView <WKNavigationDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum describing the type of a PreDefinedElement
typedef SWIFT_ENUM(NSInteger, ElementType, open) {
/// Permission to access user’s location
  ElementTypeLocation = 0,
/// Permission to access user’s Address Book
  ElementTypeContacts = 1,
/// Permission to access user’s Photo Library
  ElementTypePhotoLibrary = 2,
/// Permission to access user’s Media Library
  ElementTypeMedia = 3,
/// Permission to access user’s Calendar
  ElementTypeCalendar = 4,
/// Permission to access user’s Camera
  ElementTypeCamera = 5,
/// Permission to access user’s REminders
  ElementTypeReminders = 6,
/// Permission to share datas via Bluetooh
  ElementTypeBluetoothSharing = 7,
/// Permission to access user’s Microphone
  ElementTypeMicrophone = 8,
/// Permission to access user’s Music activity and Media Library
  ElementTypeSpeechRecognition = 9,
/// Permission to access user’s Health data
  ElementTypeHealth = 10,
/// Permission to access user’s Homekit data
  ElementTypeHomekit = 11,
/// Permission to access user’s Motion activity & Fitness data
  ElementTypeMotionFitness = 12,
/// Permission to receive local and remote notifications
  ElementTypeNotifications = 13,
/// Identity Element (firstname, lastname etc…)
  ElementTypeIdentity = 14,
/// Permission to access user’s account informations
  ElementTypeAccountInformations = 15,
/// Permission to anonymously track user’s activity within the app
  ElementTypeDataUsage = 16,
/// Permission to store cookies for marketing purposes
  ElementTypeAdvertising = 17,
/// Permission to ollects information about your preferences and usage history
  ElementTypeHistory = 18,
};


/// A PreDefinedElement is a pre-defined TrustBadgeElement, often backed by a system-permission (e.g. Location for instance)
SWIFT_CLASS("_TtC16OrangeTrustBadge17PreDefinedElement")
@interface PreDefinedElement : TrustBadgeElement
/// Flag telling if the manager should autoConfigure the element
@property (nonatomic) BOOL shouldBeAutoConfigured;
/// Standard initializer
/// \param type desired ElementType
///
///
/// returns:
/// initialized PreDefinedElement object
- (nonnull instancetype)initWithType:(enum ElementType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TermType : NSInteger;

/// A Term is a block displayed in “Terms” section
SWIFT_CLASS("_TtC16OrangeTrustBadge4Term")
@interface Term : NSObject
/// Type of a Term
@property (nonatomic) enum TermType type;
/// Localized Key for Term’s title
@property (nonatomic, copy) NSString * _Nonnull titleKey;
/// Localized Key for Term’s content (could include HTML content)
@property (nonatomic, copy) NSString * _Nonnull contentKey;
/// Initializer
/// \param type desired TermType
///
/// \param titleKey desired localized Key for Term’s title
///
/// \param contentKey desired localized Key for Term’s content
///
///
/// returns:
/// initialized Term object
- (nonnull instancetype)initWithType:(enum TermType)type titleKey:(NSString * _Nonnull)titleKey contentKey:(NSString * _Nonnull)contentKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum describing the type of a Term
typedef SWIFT_ENUM(NSInteger, TermType, open) {
/// A block displaying textual terms of use
  TermTypeText = 0,
/// A block displaying a video in terms of use
  TermTypeVideo = 1,
};

@class TrustBadgeConfig;

/// TrustBadgeManager Class is the heart of OrangeTrustBadge
SWIFT_CLASS("_TtC16OrangeTrustBadge10TrustBadge")
@interface TrustBadge : NSObject
/// Starting point to integrate TrustBadge SDK into your app.
/// Simply provide a Configuration object in order to initialize the SDK : it will contains parameters and hooks to customize standard SDK behaviours.
/// Example :
/// \code
/// let config = TrustBadgeConfig()
/// TrustBadgeManager.with(config)
///
/// \endcode\param configuration An TrustBadgeConfig containing TrustBadge configuration
///
+ (void)with:(TrustBadgeConfig * _Nonnull)configuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIImage;

/// TrustBadgeConfig aims to encapsulate all the configuration variables and custom handlers of TrustBadgeManager
SWIFT_CLASS("_TtC16OrangeTrustBadge16TrustBadgeConfig")
@interface TrustBadgeConfig : NSObject
/// Name of the app, (Default : Bundle Display Name of host app)
@property (nonatomic, copy) NSString * _Nullable appName;
/// (Optional) UIColor used to highlight element with a positive status (default black)
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
/// (Optional) background UIColor of the header (default blue)
@property (nonatomic, strong) UIColor * _Nonnull headerColor;
/// (Optional) text UIcolor of the header
@property (nonatomic, strong) UIColor * _Nonnull headerTextColor;
/// (Optional) UIImage use for the logo of the header
@property (nonatomic, strong) UIImage * _Nullable headerLogo;
/// (Optional) Status bar style (default Application’s default statusBarStyle)
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// (Optional) modal presentation style (default to none)
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// (Optional) Closure giving Tracking (Data Usage Permission) status (enabled/disabled) (Default : disabled)
/// \code
/// Example :
///
/// ```
/// let config = TrustBadgeConfig()
/// config.isTrackingEnabled = {() in return NSUserDefaults.standardUserDefaults().boolForKey("TRACKING_KEY")}
/// ```
///
/// \endcode
@property (nonatomic, copy) BOOL (^ _Nonnull isTrackingEnabled)(void);
/// (Optional) Closure giving Identity usage (Identity ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isIdentityUsed)(void);
/// (Optional) Closure giving Advertisement (Advertisement ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isAdvertisementUsed)(void);
/// (Optional) Closure giving History (history ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHistoryUsed)(void);
/// (Optional) Closure giving Phone Number (phoneNumber ElementType) status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isPhoneNumberUsed)(void);
/// (Optional) Closure giving health data status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHealfDataUsed)(void);
/// (Optional) Closure giving homekit status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isHomeKitUsed)(void);
/// (Optional) Closure giving Motion & Fitness status (enabled/disabled) (Default : disabled)
@property (nonatomic, copy) BOOL (^ _Nonnull isMotionFitnessUsed)(void);
/// (Optional) Closure allowing to update the Tracking (Data Usage ElementType) status (enabled/disabled).
/// \code
/// Example :
///
/// ```
/// let config = TrustBadgeConfig()
/// config.updateTracking = {(Bool status) in NSUserDefaults.standardUserDefaults().setBool(status, forKey: "TRACKING_KEY")}
/// ```
///
/// \endcode
@property (nonatomic, copy) void (^ _Nonnull updateTracking)(UISwitch * _Nonnull);
/// (Optional) List of TrustBadgeElements that should be displayed in “Main Elements” section. If you append an TrustBadgeElement to the Array, it will add it at the end of it. If you want to ave full control of what should be displayed, please assign a new array to this property. This section must contains at least 1 element to let TrustBadgeManager initialize properly.
/// \code
/// Example :
///
/// ```
/// let myCustomElement = CustomElement(nameKey: "custom-permission-name-key", descriptionKey: "custom-permission-description-key", statusEnabledIconName: "permission-credit-card-enabled-icon", statusDisabledIconName: "permission-credit-card-disabled-icon")
/// myCustomElement.isConfigurable = false
/// myCustomElement.statusClosure = {() in return true}
/// config.mainElements.append(myCustomElement)
///
/// //or with pre-defined permissions such as Calendar :
///
/// let calendarElement = PreDefinedElement(type: .Calendar)
/// config.mainElements.append(calendarElement)
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<TrustBadgeElement *> * _Nonnull devicePermissions;
/// (Optional) List of TrustBadgeElements that should be displayed in “Other Elements” section. If you append an TrustBadgeElement to the Array, it will add it at the end of it. If you want to ave full control of what should be displayed, please assign a new array to this property. If no elements are in the list, this section will not be displayed. (empty by default)
/// \code
/// Example :
///
/// ```
/// let myCustomElement = CustomElement(nameKey: "custom-permission-name-key", descriptionKey: "custom-permission-description-key", statusEnabledIconName: "permission-credit-card-enabled-icon", statusDisabledIconName: "permission-credit-card-disabled-icon")
/// myCustomElement.isConfigurable = false
/// myCustomElement.statusClosure = {() in return true}
/// config.otherElements.append(myCustomElement)
///
/// //or with pre-defined permissions such as Calendar :
///
/// let calendarElement = PreDefinedElement(type: .Calendar)
/// config.otherElements.append(calendarElement)
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<TrustBadgeElement *> * _Nonnull applicationData;
/// (Optional) List of Terms and Conditions that should be displayed in “terms and conditions” section. (empty by default)
/// \code
/// Example :
///
/// ```
/// let customTerm = Term(type: .Text, titleKey: "terms-data-usage-title", contentKey: "terms-data-usage-content")
/// config.terms = [customTerm]
/// ```
///
/// \endcode
@property (nonatomic, copy) NSArray<Term *> * _Nonnull terms;
/// Closure called when a page is displayed (optional).
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     pageName: the name of the page
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable pageDidAppear)(NSString * _Nonnull);
/// Closure to get the localized string for a wording key.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     key: The wording key to localize.
///   </li>
/// </ul>
///
/// returns:
///
/// The localized string or <code>nil</code> to use the default localized string.
@property (nonatomic, copy) NSString * _Nullable (^ _Nonnull localizedString)(NSString * _Nonnull);
/// Closure to get the image for a name.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     name: The name of the image to get
///   </li>
/// </ul>
///
/// returns:
///
/// The image or <code>nil</code> to use the default image.
@property (nonatomic, copy) UIImage * _Nullable (^ _Nonnull loadImage)(NSString * _Nonnull);
/// Convenience method to find elements of a given type in order to configure it directly.
/// This method will search over all elements in every collections the Manager is responsible for
/// \param type type of the Element
///
///
/// returns:
/// array of PreDefinedElements matching a given type
- (NSArray<PreDefinedElement *> * _Nonnull)elementForType:(enum ElementType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

SWIFT_PROTOCOL("_TtP16OrangeTrustBadge18TrustBadgeDelegate_")
@protocol TrustBadgeDelegate
@optional
/// If this method returns true, the landing page will displayed a cell that allows to access
/// / to this view controller.
- (BOOL)shouldDisplayCustomViewController SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return a viewController to displayed for the CustomMenuCell
- (UIViewController * _Nonnull)viewControllerAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
